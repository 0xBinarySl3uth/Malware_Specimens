#include <Windows.h>

typedef NTSTATUS(NTAPI* PUSER_THREAD_START_ROUTINE)(
        _In_ PVOID ThreadParameter
);

typedef VOID(NTAPI* PPS_APC_ROUTINE)(
        _In_opt_ PVOID ApcArgument1,
        _In_opt_ PVOID ApcArgument2,
        _In_opt_ PVOID ApcArgument3
);

typedef struct _PS_ATTRIBUTE
{
    ULONG_PTR Attribute;
    SIZE_T Size;
    union
    {
        ULONG_PTR Value;
        PVOID ValuePtr;
    };
    PSIZE_T ReturnLength;
} PS_ATTRIBUTE, * PPS_ATTRIBUTE;

typedef struct _PS_ATTRIBUTE_LIST
{
    SIZE_T TotalLength;
    PS_ATTRIBUTE Attributes[1];
} PS_ATTRIBUTE_LIST, * PPS_ATTRIBUTE_LIST;

typedef enum _EVENT_TYPE
{
    NotificationEvent,
    SynchronizationEvent
} EVENT_TYPE;

typedef struct _WIN32_API
{
    NTSTATUS(NTAPI* NtCreateEvent)(
            _Out_ PHANDLE EventHandle,
            _In_ ACCESS_MASK DesiredAccess,
            _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
            _In_ EVENT_TYPE EventType,
            _In_ BOOLEAN InitialState
    );

    NTSTATUS(NTAPI* NtCreateThreadEx)(
            _Out_ PHANDLE ThreadHandle,
            _In_ ACCESS_MASK DesiredAccess,
            _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
            _In_ HANDLE ProcessHandle,
            _In_ PUSER_THREAD_START_ROUTINE StartRoutine,
            _In_opt_ PVOID Argument,
            _In_ ULONG CreateFlags, // THREAD_CREATE_FLAGS_*
            _In_ SIZE_T ZeroBits,
            _In_ SIZE_T StackSize,
            _In_ SIZE_T MaximumStackSize,
            _In_opt_ PPS_ATTRIBUTE_LIST AttributeList
    );

    NTSTATUS(NTAPI* NtGetContextThread)(
            _In_ HANDLE ThreadHandle,
            _Inout_ PCONTEXT ThreadContext
    );

    NTSTATUS(NTAPI* NtWaitForSingleObject)(
            _In_ HANDLE Handle,
            _In_ BOOLEAN Alertable,
            _In_opt_ PLARGE_INTEGER Timeout
    );

    NTSTATUS(NTAPI* NtSignalAndWaitForSingleObject)(
            _In_ HANDLE SignalHandle,
            _In_ HANDLE WaitHandle,
            _In_ BOOLEAN Alertable,
            _In_opt_ PLARGE_INTEGER Timeout
    );

    NTSTATUS(NTAPI* NtQueueApcThread)(
            _In_ HANDLE ThreadHandle,
            _In_ PPS_APC_ROUTINE ApcRoutine,
            _In_opt_ PVOID ApcArgument1,
            _In_opt_ PVOID ApcArgument2,
            _In_opt_ PVOID ApcArgument3
    );

    NTSTATUS(NTAPI* NtAlertResumeThread)(
            _In_ HANDLE ThreadHandle,
            _Out_opt_ PULONG PreviousSuspendCount
    );

    PVOID SystemFunction032;
    PVOID NtContinue;
    PVOID NtTestAlert;
} WIN32_API, * PWIN32_API;
