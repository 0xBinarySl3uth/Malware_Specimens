#include "Windows.h"

typedef enum _EVENT_TYPE
{
    NotificationEvent,
    SynchronizationEvent
} EVENT_TYPE;

// Create timer queue object
typedef struct _WIN32_API {
    NTSTATUS(NTAPI* RtlCreateTimerQueue)(
    _Out_ PHANDLE TimerQueueHandle
    );

    // Registers wait to be signaled
    NTSTATUS(NTAPI* RtlRegisterWait)(
    _Out_ PHANDLE WaitHandle,
    _In_ HANDLE Handle,
    _In_ WAITORTIMERCALLBACKFUNC Function,
    _In_opt_ PVOID Context,
    _In_ ULONG Milliseconds,
    _In_ ULONG Flags
    );

    // Creates a new timer associated with the given queue
    NTSTATUS(NTAPI* RtlCreateTimer)(
    _In_ HANDLE TimerQueueHandle,
    _Out_ PHANDLE Handle,
    _In_ WAITORTIMERCALLBACKFUNC Function,
    _In_opt_ PVOID Context,
    _In_ ULONG DueTime,
    _In_ ULONG Period,
    _In_ ULONG Flags
    );

    // Deletes a timer queue and all the timers associated with it
    NTSTATUS(NTAPI* RtlDeleteTimerQueue)(
    _In_ HANDLE TimerQueueHandle
    );

    // Creates an event object
    NTSTATUS(NTAPI* NtCreateEvent)(
    _Out_ PHANDLE EventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ EVENT_TYPE EventType,
    _In_ BOOLEAN InitialState
    );

    // Waits until object being signaled
    NTSTATUS(NTAPI* NtWaitForSingleObject)(
    _In_ HANDLE Handle,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout
    );

    NTSTATUS(NTAPI* NtSignalAndWaitForSingleObject)(
    _In_ HANDLE SignalHandle,
    _In_ HANDLE WaitHandle,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout
    );

    // Encrypts / decrypts a given data (RC4)
    PVOID SystemFunction032;
    PVOID NtContinue;
} WIN32_API, * PWIN32_API;